import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from scipy.optimize import fsolve

# ====================================================
# PARÂMETROS
# ====================================================
gamaAgua = 10      # kN/m³
gamaConcreto = 25  # kN/m³
poisson = 1 / 6
Ec = 3.45 * 10**7  # kN/m²
Ea = 2.1 * 10**8   # kN/m²
h = 0.15           # m
h_linha = 0.2      # m
d = 6.65           # m
r = d / 2          # m
H = 4              # m
gamma = gamaAgua   # peso específico adotado

beta = ((3 * (1 - poisson**2))**0.25) / np.sqrt(r * h)

# ====================================================
# FUNÇÃO PARA CALCULAR K
# ====================================================
def equacao(K):
    return (h/h_linha)*K**(3/2) + (3/(2*beta*H))*K - (3/(4*(beta*H)**3))*(1 - 1/(beta*H))

# Chute inicial pequeno, pois a raiz é pequena
K_val = fsolve(equacao, 0.001)[0]
print(f"Valor de K encontrado: {K_val:.6e}")

# ====================================================
# FUNÇÕES NUMÉRICAS
# ====================================================
def My(y):
    return gamma * H**3 * np.exp(-beta*y) * (K_val*np.cos(beta*y) - (1/(2*(beta*H)**2))*np.sin(beta*y))

def M_teta(y):
    return poisson * My(y)

def Vy(y):
    return -(gamma*H*np.exp(-beta*y)/(2*beta)) * (
        np.cos(beta*y) - np.sin(beta*y) + 2*K_val*(beta*H)**2*(np.cos(beta*y) + np.sin(beta*y)))

def N_teta(y):
    return gamma * r * H * ((1 - (beta*y)/(beta*H)) -np.exp(-beta*y) *
           (np.cos(beta*y) - 2*K_val*(beta*H)**2 * np.exp(-beta*y) * np.sin(beta*y)))

# ====================================================
# GERAÇÃO DOS GRÁFICOS
# ====================================================
y_vals = np.linspace(0, H, 500)
My_vals = My(y_vals)
Mtheta_vals = M_teta(y_vals)
Vy_vals = Vy(y_vals)
N_vals = N_teta(y_vals)

plt.figure(figsize=(16, 10))

plt.subplot(2, 2, 1)
plt.plot(My_vals, y_vals, color='b', label='$M_y(y)$')
plt.xlabel('Momento Fletor M_y (kN·m)')
plt.ylabel('Altura (H) [m]')
plt.title('Distribuição do Momento Fletor M_y')
plt.grid(True)
plt.legend()

plt.subplot(2, 2, 2)
plt.plot(Mtheta_vals, y_vals, color='m', label='$M_θ(y)$')
plt.xlabel('Momento Torsor M_θ (kN·m)')
plt.title('Distribuição do Momento Torsor M_θ')
plt.grid(True)
plt.legend()

plt.subplot(2, 2, 3)
plt.plot(Vy_vals, y_vals, color='r', label='$V_y(y)$')
plt.xlabel('Esforço Cortante V_y (kN/m)')
plt.ylabel('Altura (H) [m]')
plt.title('Distribuição do Esforço Cortante')
plt.grid(True)
plt.legend()

plt.subplot(2, 2, 4)
plt.plot(N_vals, y_vals, color='g', label='$N_θ(y)$')
plt.xlabel('Esforço Normal N_θ (kN)')
plt.title('Distribuição do Esforço Normal')
plt.grid(True)
plt.legend()

plt.tight_layout()
plt.show()

# ====================================================
# TABELA COM VALORES A CADA 0.5 m
# ====================================================
y_tab = np.arange(0, H + 0.01, 0.5)  # de 0 a H com passo de 0.5 m
tabela = pd.DataFrame({
    'y [m]': y_tab,
    'M_y [kN·m]': My(y_tab),
    'M_theta [kN·m]': M_teta(y_tab),
    'V_y [kN/m]': Vy(y_tab),
    'N_theta [kN]': N_teta(y_tab)
})

print("\nTabela de valores a cada 0.5 m:")
print(tabela.to_string(index=False))
